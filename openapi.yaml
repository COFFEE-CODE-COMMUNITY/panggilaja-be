openapi: 3.0.0
info:
  title: PanggilAja! API
  version: 1.0.0
  description: |
    Dokumentasi API untuk platform **PanggilAja!**  
    Aplikasi marketplace jasa berbasis komunitas.  
    Semua endpoint di bawah prefix `/api`.

servers:
  - url: http://localhost:5000/api
    description: Local development server

tags:
  - name: Auth
    description: Authentication and authorization endpoints
  - name: Users
    description: User profile and address management
  - name: Services
    description: Service listings and operations
  - name: Sellers
    description: Seller profile and store management
  - name: Orders
    description: Transaction and order management
  - name: Docs
    description: Seller documentation upload and management
  - name: Favorites
    description: Manage user favorite services
  - name: Reviews
    description: Manage user reviews for sellers and services

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ====== Generic Schemas ======
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        message:
          type: string
          example: Success message
        data:
          type: object
          description: Optional data payload
          example: {}

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Bad Request
        error_code:
          type: string
          example: MISSING_CREDENTIAL
        data:
          type: object
          example: {}

    # ====== Entity Schemas ======
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 2f32e0e4-a57c-4b73-9c90-84c8e3f7d17e
        username:
          type: string
          example: johndoe
        email:
          type: string
          example: johndoe@example.com

    Address:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        alamat:
          type: string
          example: Jl. Sekeloa Kubangsari 4
        provinsi:
          type: string
          example: Jawa Barat
        kota:
          type: string
          example: Bandung
        kecamatan:
          type: string
          example: Coblong
        kode_pos:
          type: string
          example: 40123
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Service:
      type: object
      properties:
        id:
          type: string
        seller_id:
          type: string
        nama_jasa:
          type: string
          example: Servis AC Rumah
        deskripsi:
          type: string
          example: Perbaikan dan pembersihan AC rumah
        base_price:
          type: number
          example: 100000
        top_price:
          type: number
          example: 200000
        status:
          type: string
          enum: [active, inactive]
        foto_product:
          type: string
          example: https://example.com/ac.jpg

    Seller:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        deskripsi_toko:
          type: string
          example: Ahli servis AC dan elektronik rumah tangga
        foto_toko:
          type: string
          example: https://example.com/toko.jpg
        kategori_toko:
          type: string
          example: TEKNISI_ELEKTRONIK
        pengalaman:
          type: string
          example: 5 tahun pengalaman di bidang servis

    Order:
      type: object
      properties:
        id:
          type: string
        buyer_id:
          type: string
        service_id:
          type: string
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
        total_price:
          type: number
          example: 150000
        created_at:
          type: string
          format: date-time

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        service_id:
          type: string
          format: uuid
        rating:
          type: number
          example: 5
        komentar:
          type: string
          example: Pelayanan sangat memuaskan!

    CreateReviewRequest:
      type: object
      required: [service_id, rating]
      properties:
        service_id:
          type: string
          format: uuid
          example: "8744af00-63d5-4f9c-b01c-8b2b8d828e52"
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 5
        komentar:
          type: string
          example: Pelayanan sangat memuaskan!

    CreateOrderRequest:
      type: object
      required: [service_id]
      properties:
        service_id:
          type: string
          format: uuid
          example: "8744af00-63d5-4f9c-b01c-8b2b8d828e52"
        notes:
          type: string
          example: "Tolong datang pukul 14:00"

    UpdateOrderStatusRequest:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [pending, in_progress, completed, cancelled]
          example: in_progress

    AddressRequest:
      type: object
      required: [alamat, provinsi, kota, kecamatan, kode_pos]
      properties:
        alamat:
          type: string
          example: Jl. Sekeloa Kubangsari 4
        provinsi:
          type: string
          example: Jawa Barat
        kota:
          type: string
          example: Bandung
        kecamatan:
          type: string
          example: Coblong
        kode_pos:
          type: string
          example: "40123"

    Documentation:
      type: object
      properties:
        id:
          type: string
        seller_id:
          type: string
        deskripsi:
          type: string
        url_gambar:
          type: string
          example: https://example.com/docs/foto.jpg

  responses:
    BadRequest:
      description: Bad request or invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            status: error
            message: Invalid or missing data
            error_code: MISSING_CREDENTIAL
            data: {}

    Unauthorized:
      description: Missing or invalid authentication token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            status: error
            message: Access denied
            error_code: UNAUTHORIZED
            data: {}

    Forbidden:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            status: error
            message: Forbidden access
            error_code: FORBIDDEN
            data: {}

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            status: error
            message: Data not found
            error_code: NOT_FOUND
            data: {}

    Conflict:
      description: Conflict or duplicate data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            status: error
            message: Duplicate record
            error_code: CONFLICT
            data: {}

    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            status: error
            message: Internal Server Error
            error_code: SERVER_ERROR
            data: {}

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register user baru
      description: Membuat akun pengguna baru dengan username, email, dan password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        "201":
          description: User berhasil dibuat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Success to register!
                data:
                  user:
                    id: "uuid"
                    email: johndoe@example.com
                    username: johndoe
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      description: Melakukan autentikasi dan mengembalikan token akses.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
      responses:
        "200":
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Success to login!
                data:
                  user:
                    accessToken: "jwt-token"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      description: Membuat access token baru menggunakan refresh token di cookie.
      responses:
        "200":
          description: Token berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: new access token created
                data:
                  user:
                    accessToken: "jwt-token-baru"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout user
      description: Menghapus cookie refresh token dari browser.
      responses:
        "200":
          description: Logout berhasil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: User logout successfully
                data: {}
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/request-reset:
    post:
      tags: [Auth]
      summary: Request reset password
      description: Mengirimkan kode reset password ke email pengguna.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  example: johndoe@example.com
      responses:
        "200":
          description: Kode reset dikirim
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Code has been sent to user
                data: {}
        "400":
          $ref: "#/components/responses/BadRequest"

  /auth/verify-reset-code:
    post:
      tags: [Auth]
      summary: Verifikasi kode reset
      description: Memverifikasi kode reset password yang dikirim ke email pengguna.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, resetCode]
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                resetCode:
                  type: string
                  example: "123456"
      responses:
        "200":
          description: Kode valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Code valid
                data: {}
        "400":
          $ref: "#/components/responses/BadRequest"

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password
      description: Memperbarui password menggunakan kode reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, resetCode, newPassword]
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                resetCode:
                  type: string
                  example: "123456"
                newPassword:
                  type: string
                  example: newpass123
      responses:
        "200":
          description: Password berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Password updated
                data: {}
        "400":
          $ref: "#/components/responses/BadRequest"

  /auth/change-user:
    post:
      tags: [Auth]
      summary: Ganti role user (switch user)
      security:
        - BearerAuth: []
      description: Mengganti konteks user ke role lain dan mengembalikan token baru.
      responses:
        "200":
          description: Access token baru berhasil dibuat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: new access token created
                data:
                  user:
                    accessToken: "jwt-token-baru"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /auth/google:
    get:
      tags: [Auth]
      summary: Login dengan Google OAuth
      description: Redirect ke Google OAuth untuk autentikasi
      responses:
        "302":
          description: Redirect ke Google OAuth

  /auth/google/callback:
    get:
      tags: [Auth]
      summary: Google OAuth callback
      description: Callback endpoint untuk Google OAuth
      responses:
        "200":
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: User login successfully via Google
                data:
                  user:
                    accessToken: "jwt-token"
                    refreshToken: "refresh-token"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /users/{id}:
    get:
      tags: [Users]
      summary: Mendapatkan data user berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID user
      responses:
        "200":
          description: Data user berhasil diambil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: "Success Get Current User by Id: 99af03e2-a8cf-4ac9-b76e-9bfb124174d5"
                data:
                  id: "99af03e2-a8cf-4ac9-b76e-9bfb124174d5"
                  username: johndoe
                  email: johndoe@example.com
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags: [Users]
      summary: Update data user (profil)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID user yang sedang login
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Foto profil user
                data:
                  type: string
                  description: JSON string berisi data user
                  example: '{"fullname": "John Doe", "alamat": "Jl. Example No.1"}'
      responses:
        "200":
          description: Berhasil update data user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: "Success Update Current User by Id: 99af03e2-a8cf-4ac9-b76e-9bfb124174d5"
                data:
                  fullname: John Doe
                  foto_user: user1.jpg
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags: [Users]
      summary: Hapus akun user berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID user yang ingin dihapus
      responses:
        "200":
          description: User berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: "Success Delete Current User by Id: 99af03e2-a8cf-4ac9-b76e-9bfb124174d5"
                data: {}
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{id}/addresses:
    get:
      tags: [Users]
      summary: Mendapatkan alamat user berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Alamat user berhasil diambil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
              example:
                id: a7de04d8-625e-497b-8341-d8b4301bd90b
                user_id: 99af03e2-a8cf-4ac9-b76e-9bfb124174d5
                alamat: JL. Sekeloa Kubangsari 4
                provinsi: Jawa Barat
                kota: Bandung
                kecamatan: Coblong
                kode_pos: "40123"
                created_at: 2025-10-10T10:06:32.899Z
                updated_at: 2025-10-10T10:06:32.899Z
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    post:
      tags: [Users]
      summary: Menambah alamat baru
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddressRequest"
      responses:
        "201":
          description: Alamat berhasil ditambahkan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Address"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    delete:
      tags: [Users]
      summary: Menghapus alamat user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID user
        - name: addressId
          in: query
          required: true
          schema:
            type: string
          description: ID alamat yang akan dihapus
      responses:
        "200":
          description: Alamat berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Address deleted successfully
                data: {}
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{id}/orders:
    get:
      tags: [Users]
      summary: Mendapatkan daftar pesanan user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Pesanan user berhasil diambil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
              example:
                id: "order-uuid"
                buyer_id: "user-uuid"
                service_id: "service-uuid"
                status: pending
                total_price: 150000
                created_at: 2025-10-22T11:00:00.000Z
        "401":
          $ref: "#/components/responses/Unauthorized"

  /users/{id}/favorites:
    get:
      tags: [Favorites]
      summary: Mendapatkan daftar layanan favorit user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Daftar favorit berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /favorites:
    post:
      tags: [Favorites]
      summary: Tambah layanan ke daftar favorit
      security:
        - BearerAuth: []
      description: Menambahkan layanan baru ke daftar favorit user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [service_id]
              properties:
                service_id:
                  type: string
                  format: uuid
                  example: 8744af00-63d5-4f9c-b01c-8b2b8d828e52
      responses:
        "201":
          description: Favorit berhasil ditambahkan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Success Add Favorite Service
                data:
                  id: "favorite-uuid"
                  service_id: "8744af00-63d5-4f9c-b01c-8b2b8d828e52"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /favorites/{id}:
    delete:
      tags: [Favorites]
      summary: Hapus layanan dari daftar favorit
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID favorit yang akan dihapus
      responses:
        "200":
          description: Favorit berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Favorite deleted successfully
                data: {}
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /users/{id}/services:
    get:
      tags: [Users]
      summary: Mendapatkan layanan berdasarkan lokasi user
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: kecamatan
          in: query
          schema:
            type: string
            example: Coblong
          description: Nama kecamatan user
      responses:
        "200":
          description: Layanan berdasarkan lokasi berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
              example:
                - id: "srv-001"
                  nama_jasa: "Servis AC Rumah"
                  deskripsi: "Perbaikan AC"
                  base_price: 100000
                  top_price: 200000
                  status: active
        "401":
          $ref: "#/components/responses/Unauthorized"

  /services:
    get:
      tags: [Services]
      summary: Mendapatkan semua layanan
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Daftar layanan berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
        "401":
          $ref: "#/components/responses/Unauthorized"

    post:
      tags: [Services]
      summary: Tambah layanan baru
      description: Tambahkan layanan baru dengan data JSON dan file gambar.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Gambar layanan
                data:
                  type: string
                  description: JSON string berisi detail layanan
                  example: '{"nama_jasa": "Servis AC Rumah", "deskripsi": "Perbaikan AC", "base_price": 100000, "top_price": 200000, "status": "active"}'
      responses:
        "201":
          description: Layanan berhasil dibuat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

  /services/category:
    get:
      tags: [Services]
      summary: Mendapatkan daftar kategori layanan
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Daftar kategori berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: TEKNISI_ELEKTRONIK
        "401":
          $ref: "#/components/responses/Unauthorized"

  /services/{id}:
    get:
      tags: [Services]
      summary: Mendapatkan detail layanan berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Detail layanan berhasil diambil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags: [Services]
      summary: Update data layanan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: Layanan berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequest"

    delete:
      tags: [Services]
      summary: Hapus layanan berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Layanan berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "404":
          $ref: "#/components/responses/NotFound"

  /sellers:
    get:
      tags: [Sellers]
      summary: Mendapatkan semua data seller
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Daftar seller berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Seller"

    post:
      tags: [Sellers]
      summary: Tambah seller baru
      description: Tambahkan data seller baru dengan JSON dan file.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                data:
                  type: string
                  description: JSON string data seller
                  example: '{"deskripsi_toko": "Ahli servis AC", "kategori_toko": "TEKNISI_ELEKTRONIK"}'
      responses:
        "200":
          description: Seller berhasil ditambahkan
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Seller"

  /sellers/{id}:
    get:
      tags: [Sellers]
      summary: Mendapatkan detail seller berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Seller berhasil diambil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Seller"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

    put:
      tags: [Sellers]
      summary: Update data seller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID seller yang akan diperbarui
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Seller"
      responses:
        "200":
          description: Seller berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

    delete:
      tags: [Sellers]
      summary: Hapus data seller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID seller yang ingin dihapus
      responses:
        "200":
          description: Seller berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
  /sellers/{id}/services:
    get:
      tags: [Sellers]
      summary: Mendapatkan semua layanan dari seller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID seller
      responses:
        "200":
          description: Daftar layanan seller berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"

  /sellers/{id}/orders:
    get:
      tags: [Orders]
      summary: Mendapatkan semua pesanan dari seller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID seller
      responses:
        "200":
          description: Daftar pesanan berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

  /sellers/{id}/docs:
    get:
      tags: [Docs]
      summary: Mendapatkan semua dokumen seller
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID seller
      responses:
        "200":
          description: Daftar dokumen seller berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Documentation"

  /orders:
    post:
      tags: [Orders]
      summary: Membuat pesanan baru
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrderRequest"
      responses:
        "201":
          description: Pesanan berhasil dibuat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Order added successfully!
                data:
                  id: "order-uuid"
                  buyer_id: "user-uuid"
                  service_id: "service-uuid"
                  status: pending
                  total_price: 150000
                  notes: "Tolong datang pukul 14:00"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /orders/{id}:
    get:
      tags: [Orders]
      summary: Mendapatkan detail pesanan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID pesanan
      responses:
        "200":
          description: Detail pesanan berhasil diambil
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /orders/{id}/status:
    put:
      tags: [Orders]
      summary: Update status pesanan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID pesanan
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateOrderStatusRequest"
      responses:
        "200":
          description: Status pesanan berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /orders/{id}:
    delete:
      tags: [Orders]
      summary: Hapus pesanan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID pesanan
      responses:
        "200":
          description: Pesanan berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /docs/{id}:
    put:
      tags: [Docs]
      summary: Update dokumen berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID dokumen
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Documentation"
      responses:
        "200":
          description: Dokumen berhasil diperbarui
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Documentation"

    delete:
      tags: [Docs]
      summary: Hapus dokumen berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: ID dokumen
      responses:
        "200":
          description: Dokumen berhasil dihapus
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"

  /reviews:
    post:
      tags: [Reviews]
      summary: Membuat review baru
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReviewRequest"
      responses:
        "201":
          description: Review berhasil dibuat
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                status: success
                message: Review created successfully
                data:
                  id: "review-uuid"
                  user_id: "user-uuid"
                  service_id: "service-uuid"
                  rating: 5
                  komentar: "Pelayanan sangat memuaskan!"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

    get:
      tags: [Reviews]
      summary: Mendapatkan review milik user yang sedang login
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Review user berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /reviews/service/{serviceId}:
    get:
      tags: [Reviews]
      summary: Mendapatkan review berdasarkan layanan
      security:
        - BearerAuth: []
      parameters:
        - name: serviceId
          in: path
          required: true
          schema:
            type: string
          description: ID layanan
      responses:
        "200":
          description: Review berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /reviews/seller/{sellerId}:
    get:
      tags: [Reviews]
      summary: Mendapatkan review berdasarkan seller
      security:
        - BearerAuth: []
      parameters:
        - name: sellerId
          in: path
          required: true
          schema:
            type: string
          description: ID seller
      responses:
        "200":
          description: Review berhasil diambil
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
        "401":
          $ref: "#/components/responses/Unauthorized"
